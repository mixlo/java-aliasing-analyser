ACTIONS TO BE TAKEN FOR EACH RESPECTIVE EVENT

* INFORMATION
** 1 ALLOCATION

   1 objID objType callerToNew

   objID       - A unique integer larger than 0
   objType     - The name of the class of the object
   callerToNew - The caller to new. Forms:
       <obj_id>	    If instantiated object
       <class_name> If static class

   Usually the ALLOC event is the first event ever to occur for an 
   object, which makes sense. But when it comes to instantiating 
   certain (*) classes, the ALLOC event is preceded by an MCALL event 
   to an initialisation method for the object. The object ID is then 
   passed as parameter to that <init> method, meaning that the object 
   ID will appear in the output before the ALLOC event. This is 
   something to be taken into account when designing the algorithm.

   (*) According to observations so far, only instantiation of USER 
   DEFINED classes involves an MCALL to an <init> method.

** 2 FIELD LOAD

   2 fieldName loadedObjID caller fieldOwner

   fieldName   - The name of the field from which an object was loaded
   loadedObjID - Object ID of object loaded from the field
       <obj_id>     If instantiated object and non-static field
       0	    If static field, regardless of object type
       0 	    If field value is primitive type
       0            If field value is null
   caller      - Object or static class performing the field load
       <obj_id>	    If instantiated object
       <class_name> If static class
   fieldOwner  - Owner of field, static class or instantiated object
       <obj_id>	    If instantiated object
       <class_name> If static class

   When a static field is loaded, loadedObjID will be 0, even if the 
   loaded object isn't a primitive type or null. This needs to be taken 
   into account when designing the algorithm. Though as of now it 
   doesn't seem like the FLOAD event needs any attention at all, so 
   this abnormality can possibly be ignored.

** 3 FIELD STORE

   3 fieldName storedObjID oldObjID caller fieldOwner

   fieldName      - The name of the field in which an object was stored
   storedObjID    - The object ID of the stored object. Forms:
       <obj_id>       If object is an instantiated object
       0              If object is an uninstantiated String object
       0              If object is primitive
       0              If object is null
   oldObjID       - ID of previously stored object in this field. Forms:
       <obj_id>       If object was an instantiated object
       0              If object was an uninstantiated String object
       0              If object was primitive
       0              If object was null
   caller         - Object or static class performing the field store
       <obj_id>	      If instantiated object
       <class_name>   If static class
   fieldOwner         - The owner of the field.
       <obj_id>	      If instantiated object
       <class_name>   If static class

   fieldOwner might be introduced at an FSTORE event, if fieldOwner is 
   the name of a class (the holding field is static, that is).

   FSTORE events will be recorded for autoboxed objects. The object ID 
   will be 0, unless the value is cached (e.g. IntegerCache), in which 
   case the object will have the object ID of the cached value.

   Referring to Java documentation, the values returned by boxing 
   conversion might be cached, either lazily or eagerly. The size of 
   the cache can in later versions of Java can be configured by the 
   user (Java 7), so nothing should be hard coded.

** 4 METHOD CALL

   4 methodName caller methodOwner [arg1] [arg2] ...

   methodName  - Name of called method. Forms:
       Name         The exact name of the called method
       <init>       Object initialise method (field objects)
    	            methodOwner: <obj_id> of object to be initialised
	            This method gets called before allocation event.
       <clinit>     Class initialise method (static field objects)
    	            On Main class, JVM calls this method.
	            methodOwner: <class_name> of class to be initialised
   caller      - The caller of the method. Forms:
       LName;       If method is called from any static context (field 
    	            initialisation, static methods), caller is 
		    represented by the class's class type signature.
       <obj_id>     If method is called from the context of an 
	            instantiated object.
       -	    If the JVM called the method      
   methodOwner - Owner of method, static class or instantiated object
       <obj_id>     If instantiated object
       <class_name> If static class
   args        - <obj_id>s of the arguments passed to the method

   1
   The args of the MCALL event will not always correspond to the actual 
   arguments passed to the method in the source file. Based on 
   observations so far, the following facts can be established:
   - Primitives: will not be shown in either MCALL or MEXIT
   - Unallocated String objects: shown in MCALL, not shown in MEXIT
   - Allocated objects: shown in both MCALL and MEXIT
   Since unallocated String objects aren't seen in either of events 
   1, 2, 3, 5, 6 or 7, the MCALL event will be the first time these 
   objects are seen, and this needs to be taken into account.

   2
   Based on observations so far, objects that appear for the first 
   time as MCALL args can be:
   - Objects of a user-defined class, if methodName is <init>
   - Unallocated String objects
   - Autoboxed objects
   Unallocated String objects will only show up in the MCALL event and 
   autoboxed objects are just immutable wrapper classes for the 
   primitive types, so these two are not very interesting when 
   studying object aliasing. However, considering the inconvenience 
   and complexity of attempting to distinguish these cases, it's 
   easier just to treat them the same way as the the first case, 
   that is, to add them to the model even if they won't be used much.

   3
   Anomaly: Suppose object A constructor calls object B constructor. 
   MCALL and MEXIT events of object B <init> method will have the same 
   caller (object A objID), but different methodOwners 
   (MCALL: object B objID (correct), MEXIT: object A objID (wrong)). 
   MEXIT event will additionally have objID of object B as an object 
   going out of scope.

   4
   Anomaly: Suppose object A constructor calls a static method foo() 
   contained in a class Test. MCALL and MEXIT events of foo will have 
   the same caller (object A objID), but different methodOwners
   (MCALL: Test (correct), MEXIT: object A objID (wrong)).
   MEXIT event will additionally have Test as an object going out of 
   scope (a class going out of scope?).

   5
   The anomalies with the MCALL and MEXIT events (differing method 
   owners) will simply be ignored, since it probably won't affect the 
   result too much. Another reason is that this program shouldn't be 
   adjusted too much after the bugs in Erik's program, since if he 
   decides to fix his, this program might stop working. However, to 
   prevent the program from crashing in the event of trying to decrease 
   the number of stack references between two objects that have no edge 
   between them, the process method includes a defensive verification 
   of that not being the case.

** 5 DEALLOCATION

   5 objID

   objID - Object ID of deallocated object

   1
   When the DEALLOC event occurs for an object, the allocated memory 
   for the object is truly released and the object cease to exist in 
   memory. However, the DEALLOC event is not guaranteed to occur 
   before the termination of Erik's tool. This means that the DEALLOC 
   might not even be included in the output file, and thus will not 
   be analysed, and the analysis will show incorrect results.

   2
   An alternate solution to achieve correct results is to simulate the 
   DEALLOC event, by checking for when the object in question has no 
   incoming stack or heap references. At this point, the object will 
   never be able to be referenced again, and it will be scheduled for 
   garbage collection. At that point, it's just a matter of time 
   before the DEALLOC event occurs for the object, and we might as 
   well speed it up a bit by taking action right away.

   3
   By doing this, we don't need to take any action when the DEALLOC 
   event occurs. Instead we must check for when the total amount of 
   references can reduce to 0. This can occur at three different 
   events: 
   - FSTORE (when the old object loses its heap reference), 
   - VSTORE (when the old object loses its stack reference)
   - MEXIT  (when all local variables in the method releases their 
             stack references to the objects).

   4
   At this point, point 2 and 3 is not in question, and instead 
   handling all still existing objects at the end of the program 
   execution.

** 6 METHOD EXIT

   6 methodName returnedObjID caller methodOwner [arg1] [arg2] ...

   methodName    - Name of exited method. Forms:
       Name          The exact name of the exited method
       <init>        Object initialise method (field objects)
    	             methodOwner: <obj_id> of initialised object
	             This method was called before allocation event.
       <clinit>      Class initialise method (static field objects)
    	             On Main class, JVM called this method.
	             methodOwner: <class_name> of initialised class
   returnedObjID - ID of object returned from the method. Forms:
       <obj_id>      If instantiated object
       0             If primitive object
       0             If method is of type void
   caller        - The caller of the method. Forms:
       LName;        If method was called from any static context (field 
    	             initialisation, static methods), caller is 
		     represented by the class's class type signature.
       <obj_id>      If method was called from the context of an 
	             instantiated object.
       -	     If the JVM called the method
   methodOwner   - Owner of method, static class or instantiated object
       <obj_id>      If instantiated object
       <class_name>  If static class
   args          - <obj_id>s of the local variables going out of scope
   
** 7 VARIABLE STORE

   7 storedObjID oldObjID caller

   storedObjID - The object ID of the stored object. Forms:
       <obj_id>       If object is an instantiated object
       0              If object is an uninstantiated String object
       0              If object is null
   oldObjID    - ID of previously stored object in this variable. Forms:
       <obj_id>       If object was an instantiated object
       0              If object was an uninstantiated String object
       0              If object was primitive
       0              If object was null
   caller      - Performer of VSTORE and also owner of variable. Forms:
       <obj_id>       If instantiated object
       <class_name>   If static class

   1
   VSTORE events will be recorded for autoboxed objects. The object ID 
   will be 0, unless the value is cached (e.g. IntegerCache), in which 
   case the object will have the object ID of the cached value.

   2
   Referring to Java documentation, the values returned by boxing 
   conversion might be cached, either lazily or eagerly. The size of 
   the cache can in later versions of Java be configured by the user 
   (Java 7), so nothing should be hard coded.



* ACTIONS
** 1 ALLOCATION
   
   1 objID objType callerToNew

   if objID not in model:
     add to model
     add queries to object
     add information about the added object such as type
     
** 2 FIELD LOAD

   2 fieldName loadedObjID caller fieldOwner

   As of now, FLOAD seems to be of no interest.
   Perhaps expand functionality to be able to see how frequently an 
   object is used

** 3 FIELD STORE
   
   3 fieldName storedObjID oldObjID caller fieldOwner

   if fieldOwner not in graph (static field in class): 
     add to model
   if oldObjID != 0: 
     remove heap ref fieldOwner->oldObjID
   if storedObjID != 0: 
     add heap ref fieldOwner->storedObjID

** 4 METHOD CALL

   4 methodName caller methodOwner [arg1] [arg2] ...

   // Verification, see MCALL:1,2,5
   if methodOwner not in model:
     add to model
   for arg in args:
     // Verification, see MCALL:1,2,5
     if arg not in model:
       add to model
     add stack ref methodOwner->arg

** 5 DEALLOCATION

   5 objID

   remove objID from model

** 6 METHOD EXIT
   
   6 methodName returnedObjID caller methodOwner [arg1] [arg2] ...

   // THIS NEEDS TO TESTED, IF STACK REF COUNT CAN GO BELOW 0
   for arg in args:
     // Verification if anomalies, see MCALL:3,4,5
     if exists edge methodOwner->arg:
       remove stack ref methodOwner->arg

** 7 VARIABLE STORE

   7 storedObjID oldObjID caller

   if oldObjID != 0: 
     remove stack ref caller->oldObjID
   if storedObjID != 0: 
     add stack ref caller->storedObjID


* TODO

- Use FLOAD to get results about how often the object is used

- Make decision about when DEALLOC event should occur. 
  1. Simulate it ourselves?
  2. Wait for DEALLOC?
  3. Simulate it ourselves and also simulate it on every still existing 
     object at end of execution, collecting data from them too?
  4. Wait for DEALLOC and simulate DEALLOC ourselves on every still 
     existing object at end of execution, collecting data from them too?
  (probably option no. 3?)
